# Puppet CI Resources

# Load puppet modules
classes:
  - nsidc_jenkins

# Jenkins Plugins
nsidc_jenkins::plugins:
  git: {}
  git-client: {}
  git-parameter: {}
  scm-api: {}
  credentials: {}
  ssh-credentials: {}
  greenballs: {}
  jobConfigHistory: {}
  mailer: {}
  instant-messaging: {}
  jabber: {}
  ansicolor: {}

# Jenkins Jobs
nsidc_jenkins::jobs:
  # clone the project into the shared workspace
  "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_1_Checkout_Project":
    git:
      repo: "%{hiera('gitrepo')}"
      branches: "*/%{hiera('gitbranch')}"
      checkout_local: "%{hiera('gitbranch')}"
      poll_scm: true
    workspace: "/var/lib/jenkins/workspace-%{hiera('project')}-%{hiera('gitbranch')}"
    trigger_job: "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_2_Configure_System"

  # use puppet to install system dependencies, such as Bundler
  "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_2_Configure_System":
    command: |
      #!/bin/bash -x
      cd puppet
      librarian-puppet clean || exit 1
      librarian-puppet update || exit 1
      cd -
      # with the --detailed-exitcodes flag, exit code of 2 means that changes
      # were made, i.e., puppet did stuff to your system like it's supposed to
      #
      # https://docs.puppetlabs.com/references/3.4.latest/man/agent.html
      sudo puppet apply --environment=ci %{::puppet_options} %{::puppet_manifest}
      (( $? == 0 || $? == 2 )) || exit 1
    workspace: "/var/lib/jenkins/workspace-%{hiera('project')}-%{hiera('gitbranch')}"
    trigger_job: "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_3_Check_Syntax"

  "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_3_Check_Syntax":
    command: rake lint
    workspace: "/var/lib/jenkins/workspace-%{hiera('project')}-%{hiera('gitbranch')}"
    trigger_job: "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_4_Run_Unit_Tests"

  "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_4_Run_Unit_Tests":
    command: rake spec:unit
    workspace: "/var/lib/jenkins/workspace-%{hiera('project')}-%{hiera('gitbranch')}"
    trigger_job: "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_5_Run_Integration_Tests"

  "Project_%{hiera('project')}_Branch_%{hiera('gitbranch')}_5_Run_Integration_Tests":
    command: |
      set +e; vagrant nsidc hijack --env=integration; set -e
      rake spec:integration
    workspace: "/var/lib/jenkins/workspace-%{hiera('project')}-%{hiera('gitbranch')}"



  # Jobs for performing a release.

  "Project_%{hiera('project')}_Release_1_Bump_Version_and_Tag":
    git:
      repo: "%{hiera('gitrepo')}"
      poll_scm: false
    parameters:
      - type: string
        name: branch
        description: git branch to checkout and tag
        default: master
      - type: choice
        name: version_type
        choices:
          - patch
          - minor
          - major
    command: |
      git checkout $branch
      rake bump[$version_type]
      git push origin master --tags
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/release
    trigger_job: "Project_%{hiera('project')}_Release_2_Publish_Latest"

  # This job is expecting that you have pushed up a branch called
  # latest to the repo.  The latest branch can be referenced with the
  # :ref => 'latest' option when calling the module in the consumer's Puppetfile.
  "Project_%{hiera('project')}_Release_2_Publish_Latest":
    command: |
      git fetch origin latest
      git checkout latest
      git pull
      git merge master
      git push origin latest
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/release


  # Jobs for destroying machines

  "Project_%{hiera('project')}_Destroy_VMs":
    git:
      repo: "%{hiera('gitrepo')}"

    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/cleanup
    description: cleanup project (destroy all the machines)
    command: |

      # note that all commands (even if they fail) will eval to true
      #
      # this allows ALL environments to be cleaned up if one doesnt
      # exist
      #
      # you should monitor the output of this job for real errors

      # cleanup, hijack, destroy
      rm -rf .vagrant-integration
      (vagrant nsidc hijack --env=integration || true)
      (vagrant nsidc destroy --env=integration || true)

